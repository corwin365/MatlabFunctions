%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Hindley23 PW filter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [Data,PW] = func_filter_hindley23(Data,Settings)


 %copy the T' and T fields generated by Neil's code
 Data.Tp   = Data.Temp_Residual;
 Data.Temp = nansum(Data.Temp_PW,3);

 %store PWs
 PW = Data.Temp_PW;

 %remove outliers
 if Settings.H23_OutRem == true

   %latitude and longitude have physical limits
   Bad = [];
   Bad = [Bad;find(Data.Lat <  -90 | Data.Lat >  90 | Data.Lon < -180 | Data.Lon > 180)];

   %temperature should be >100K always, and  <400K at altitudes below the mesopause
   Bad = [Bad;find(Data.Temp < 100)];
   Bad = [Bad;find(Data.Temp > 400 & Data.Alt < 100)];

   %do it
   Bad = unique(Bad);
   Fields = fieldnames(Data);
   for iF=1:1:numel(Fields)
     F = Data.(Fields{iF});
     F(Bad) = NaN;
     Data.(Fields{iF}) = F;
   end
 end

 %compute background
Data.BG = Data.Temp - Data.Tp;

return
end

