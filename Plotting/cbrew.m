

% cbrew.m NPH UoB 20170901

% Generate cbrewer colormap with simpler inputs. Also generate NPH custom
% colormaps.

% ONE INPUT:
% Specify either the name of the colormap or it's number below:
%
% cmap = cbrew(1);      or   cmap = cbrew('Spectral');
% cmap = cbrew(5);      or   cmap = cbrew('RdBu');
% cmap = cbrew(21);     or   cmap = cbrew('Oranges');
%
% default length is 64 element length colormaps.
% Name is case-insensitive.

% TWO INPUTS:
% Also specify the length of the colormap:
%
% cmap = cbrew(1,32);   or   cmap = cbrew('Spectral',32);
% cmap = cbrew(5,32);   or   cmap = cbrew('RdBu',32);
%
% Note that divergent colormaps are flipud()'ed as per the CBrewer Preview.

% EDIT: NOW ADDED NEW PIVOT CAPABILITY!!!!
% cbrew('RdBu',64,'pivot',0.75);


function cmap = cbrew(varargin)

% Same order as in the preview supplied with cbrewer:
cmapnames = {
    'Spectral'  , 'div'
    'RdYlGn'    , 'div'
    'RdYlBu'    , 'div'
    'RdGy'      , 'div'
    'RdBu'      , 'div'
    'PuOr'      , 'div'
    'PRGn'      , 'div'
    'PiYG'      , 'div'
    'BrBG'      , 'div'
    'YlOrRd'    , 'seq'
    'YlOrBr'    , 'seq'
    'YlGnBu'    , 'seq'
    'YlGn'      , 'seq'
    'Reds'      , 'seq'
    'RdPu'      , 'seq'
    'Purples'   , 'seq'
    'PuRd'      , 'seq'
    'PuBuGn'    , 'seq'
    'PuBu'      , 'seq'
    'OrRd'      , 'seq'
    'Oranges'   , 'seq'
    'Greys'     , 'seq'
    'Greens'    , 'seq'
    'GnBu'      , 'seq'
    'BuPu'      , 'seq'
    'BuGn'      , 'seq'
    'Blues'     , 'seq'
    'Set3'      , 'qual'
    'Set2'      , 'qual'
    'Set1'      , 'qual'
    'Pastel2'   , 'qual'
    'Pastel1'   , 'qual'
    'Paired'    , 'qual'
    'Dark2'     , 'qual'
    'Accent'    , 'qual'};


customcmaps = {...
    'nph_RdYlBu'
    'nph_Spectral'
    'nph_Parula'
    'nph_Rainbow'
    'nph_BuOr'
    'nph_BuOr2'
    'nph_BlueOrange'
    'nph_BuOrRd'
    'nph_alt_jet'
    'nph_RdYlBuGrey'
    'nph_modspectral'
    'nph_RdBuPastel'
    'nph_RainbowWhite'
    'nph_CyclicIceFire'
    'nph_CyclicEdge'
    'nph_CyclicMRYBM'
    'nph_CyclicMRGBM'
    'nph_OSQual'
    'nph_OSDiv1'
    'nph_OSDiv2'
    'nph_OSBlues'
    'nph_OSGreens'
    'nph_OSPinks'
    'nph_OSGnBu'
    'nph_OSOrRdPu'
    'nph_OSYlOrRd'
    'nph_OSRdBuCombo'
    'nph_ColorWheel'
    'nph_CyclicRainbow'};

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% COLORMAP LENGTH
switch length(varargin)
    case 0 % NO INPUTS, default
        cmap = flipud(cbrewer('div','RdBu',64));
        return;
    case 1 % ONE INPUT
        len = 64; % default 64x3 element colormap vector
    otherwise % TWO OR MORE INPUTS
        %         if isnumeric(varargin{2})
        len = varargin{2}; % user specified length
        %         else
        %             len = 64;
        %         end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% COLORMAP TYPE
switch isnumeric(varargin{1})
    
    case 1 % NUMERIC INPUT
        
        cname = cmapnames{varargin{1},1};
        ctype = cmapnames{varargin{1},2};
        
        % set some default lengths for qualitative cmaps, i.e. ignore the
        % input length:
        switch cname
            case {'Dark2','Accent','Pastel2','Set2'}
                len = 8;
            case {'Set3','Paired'}
                len = 12;
            case {'Pastel1','Set1'}
                len = 9;
        end
        
        cmap = cbrewer(ctype,cname,len);
        
        
    case 0 % STRING INPUT
        
        % parse input:
        switch any(strcmpi(varargin{1},cmapnames(:,1)))
            
            case 1 % if it is a recognised cbrewer one:
                
                % get correct letter case from list
                cname = cmapnames{strcmpi(varargin{1},cmapnames(:,1)),1};
                ctype = cmapnames{strcmpi(varargin{1},cmapnames(:,1)),2};
                
                % set some default lengths for qualitative cmaps, i.e. ignore the
                % input length:
                switch cname
                    case {'Dark2','Accent','Pastel2','Set2'}
                        len = 8;
                    case {'Set3','Paired'}
                        len = 12;
                    case {'Pastel1','Set1'}
                        len = 9;
                end
                
                cmap = cbrewer(ctype,cname,len);
                
                
            case 0
                % else try my custom colormaps:
                
                if nargin == 1, len = 0; end
                
                switch any(strcmpi(varargin{1},customcmaps))
                    case 1
                        cmap = custom_cmap(varargin{1},len);
                        ctype = 'custom';
                    otherwise % else not recognised, return
                        disp(['Unrecognised colormap: ' varargin{1}])
                        return
                end
                
                
        end
        
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CORRECT FOR LENGTHS OF LESS THAN EIGHT (cbrewer doesn't like them, not full range)
switch ctype
    case {'qual' 'seq' 'div'}
        if len < 11
            fullcmap = cbrewer(ctype,cname,11);
            cmap = interp1(1:11,fullcmap,linspace(2,10,len));
        end
    otherwise
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FLIP DIVERGING COLORMAPS:
% for some reason div colorbars are flipped compared to the cbrewer preview.
switch ctype
    case 'div'
        cmap = flipud(cmap);
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PIVOT
% Add the ability to change the pivot of the selected colormap. So for a
% diverging colormap, move the zero position.
% Pivot values are currently defined as between 0 and 1, where 0 means all
% the way to the bottom and 1 mean all the way to the top. I might change
% this at some point, but it's the simplest way without including actual
% clims into this function. By default pivot is 0.5, i.e. in the middle.

if any(strcmpi('pivot',varargin))
    
    pivot = varargin{find(strcmpi('pivot',varargin))+1};
    
    % Parse input
    if pivot < 0 || pivot > 1
        disp('Pivot value must be between 0 and 1.')
        pivot = 0.5;
    end
    
    
    if pivot ~= 0.5 % requires a change
        
        cmapi = griddedInterpolant({linspace(1,len,len),1:3},cmap,'linear');
        
        midpoint = floor(0.5*len) + 1;
        
        len1 = floor(len * pivot);
        len2 = len - len1;
        
        %         if any(strcmpi('power',varargin))
        %             pow = varargin{find(strcmpi('power',varargin))+1};
        %             cmap = cmapi({[powerspace(1,midpoint,len1,pow) powerspace(midpoint,len,len2,pow)],1:3});
        %         else
        cmap = cmapi({[linspace(1,midpoint,len1) linspace(midpoint,len,len2)],1:3});
        %         end
        
        
    end
end

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% % POWER SPACE
% % tired of always having linearly progressing colormaps? Well now with
% % powerspace, you can have a colormap that ramps in any power you want!
% % Slow it down to be data = sqrt(data) or speed up to be data =
% % log10(data) or whatever.
%
% % POW should be a 1 or 2 element vector for 'seq' and 'div' colormaps.
%
% if any(strcmpi('power',varargin))
%
%     % Extract power space value
%     pow = varargin{find(strcmpi('power',varargin))+1};
%
%     % Pivot will have already had the correct power spacing applied above:
%     if any(strcmpi('pivot',varargin))
%         pow = 1;
%     end
%
%     cmapi = griddedInterpolant({linspace(1,len,len),1:3},cmap,'linear');
%
%
% end








end % end function





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function ccmapi = custom_cmap(ccmap_name,len)

switch lower(ccmap_name)
    case lower('nph_RdYlBu')
        ccmap = [...
            0.192156862745098         0.211764705882353         0.584313725490196
            0.270588235294118         0.458823529411765         0.705882352941177
            0.454901960784314         0.67843137254902          0.819607843137255
            0.670588235294118         0.850980392156863         0.913725490196078
            0.87843137254902          0.952941176470588         0.972549019607843
            1                         1                         1
            0.996078431372549         0.87843137254902          0.564705882352941
            0.992156862745098         0.682352941176471         0.380392156862745
            0.956862745098039         0.427450980392157         0.262745098039216
            0.843137254901961         0.188235294117647         0.152941176470588
            0.647058823529412                         0         0.149019607843137];
        
    case lower('nph_Spectral')
        ccmap = [...
            0.368627450980392         0.309803921568627         0.635294117647059
            0.196078431372549         0.533333333333333         0.741176470588235
            0.4          0.76078431372549         0.647058823529412
            0.670588235294118         0.866666666666667         0.643137254901961
            0.901960784313726          0.96078431372549         0.596078431372549
            1                         1                         1
            0.996078431372549          0.87843137254902         0.545098039215686
            0.992156862745098         0.682352941176471         0.380392156862745
            0.956862745098039         0.427450980392157         0.262745098039216
            0.835294117647059         0.243137254901961         0.309803921568627
            0.619607843137255       0.00392156862745098         0.258823529411765];
    case lower('nph_Parula')
        ccmap = [...
            0        0.0745098039215686         0.352941176470588
            0.105098039215686         0.193725490196078         0.476078431372549
            0.210980392156863         0.290196078431373         0.544313725490196
            0.310588235294118         0.373333333333333          0.56078431372549
            0.404705882352941         0.443921568627451          0.56078431372549
            0.501960784313725         0.513725490196078         0.549019607843137
            0.603137254901961         0.581960784313726         0.512156862745098
            0.728627450980392         0.658039215686275         0.425098039215686
            0.864313725490196         0.729411764705882         0.296470588235294
            0.991372549019608         0.780392156862745          0.11843137254902
            0.984313725490196         0.819607843137255        0.0784313725490196];
    case lower('nph_Rainbow')
        ccmap = [...
            0.2         0.431372549019608         0.690196078431373
            0.282352941176471         0.626274509803922          0.83921568627451
            0.507450980392157         0.784313725490196         0.854901960784314
            0.513725490196078         0.756862745098039          0.70156862745098
            0.509803921568627         0.709803921568627         0.349803921568627
            0.509803921568627         0.709803921568627         0.301960784313725
            0.621960784313725         0.749803921568627         0.337254901960784
            0.956862745098039         0.894509803921569         0.423529411764706
            0.972549019607843         0.803137254901961         0.405490196078431
            0.870588235294118         0.434117647058823         0.309803921568627
            0.882352941176471         0.545098039215686         0.513725490196078];
    case {lower('nph_BuOr'),lower('nph_BlueOrange')}
        ccmap = [...
            0.0313725490196078         0.188235294117647         0.419607843137255
            0.135455163587567         0.449725189198224         0.713326283812265
            0.290980392156863         0.594509803921569         0.789019607843137
            0.666666666666667         0.812156862745098         0.898823529411765
            0.843977272727273          0.90289592760181         0.959858696515043
            1                         1                         1
            0.994494720965309         0.878849015590757         0.760544855110186
            0.992156862745098         0.722352941176471         0.484313725490196
            0.954509803921569                      0.44         0.106666666666667
            0.856555258467023         0.288205717830114       0.00589314194577355
            0.498039215686275         0.152941176470588        0.0156862745098039];
    case lower('nph_BuOr2')
        ccmap = [...
            0.0313725490196078         0.250980392156863         0.505882352941176
            0.0313725490196078         0.407843137254902         0.674509803921569
            0.168627450980392         0.549019607843137         0.745098039215686
            0.23503474718428         0.629359118440992          0.79966926529648
            0.305882352941176         0.701960784313725         0.827450980392157
            0.482352941176471                       0.8         0.768627450980392
            0.658823529411765         0.866666666666667         0.709803921568627
            0.8          0.92156862745098         0.772549019607843
            0.841297613861865         0.938084181040837         0.814072637095465
            0.87843137254902         0.952941176470588         0.858823529411765
            0.968627450980392         0.988235294117647         0.941176470588235
            1                         1         0.898039215686275
            1         0.968627450980392         0.737254901960784
            0.998039215686275         0.936523524464454         0.657995937382857
            0.996078431372549         0.890196078431372         0.568627450980392
            0.996078431372549         0.768627450980392         0.309803921568627
            0.996078431372549                       0.6          0.16078431372549
            0.925490196078431          0.43921568627451        0.0784313725490196
            0.871378944461402         0.363483940693372        0.0302097583219334
            0.8         0.298039215686275       0.00784313725490196
            0.6         0.203921568627451        0.0156862745098039
            0.4         0.145098039215686        0.0235294117647059];
        
    case lower('nph_BuOrRd')
        ccmap = [...
            0.0313725490196078         0.188235294117647         0.419607843137255
            0.135455163587567         0.449725189198224         0.713326283812265
            0.290980392156863         0.594509803921569         0.789019607843137
            0.666666666666667         0.812156862745098         0.898823529411765
            0.843977272727273          0.90289592760181         0.959858696515043
            1                         1                         1
            0.994494720965309         0.887878787878788         0.732658819912354
            0.992156862745098         0.762745098039216         0.548235294117647
            0.947450980392157         0.427450980392157         0.295686274509804
            0.84848265776899          0.19888857901819         0.130279976588332
            0.498039215686275                         0                         0];
    case lower('nph_alt_jet')
        ccmap = [...
            0.529411764705882         0.850980392156863         0.992156862745098
            0.384313725490196         0.694117647058824         0.988235294117647
            0.0470588235294118          0.32156862745098          0.76078431372549
            0.0862745098039216         0.611764705882353         0.290196078431373
            0.113725490196078         0.741176470588235          0.32156862745098
            0.909803921568627         0.945098039215686         0.192156862745098
            0.996078431372549         0.925490196078431         0.203921568627451
            0.992156862745098         0.694117647058824         0.356862745098039
            0.988235294117647         0.317647058823529          0.12156862745098
            0.941176470588235        0.0470588235294118        0.0980392156862745
            0.788235294117647        0.0313725490196078        0.0745098039215686];
    case lower('nph_RdYlBuGrey')
        ccmap = [...
            0.985607843137255         0.985607843137255         0.985098039215686
            0.729411764705882         0.770196078431373         0.849411764705882
            0.564117647058824         0.648117647058824         0.765882352941176
            0.591372549019608         0.709019607843137         0.827372549019608
            0.76156862745098         0.843921568627451         0.856705882352941
            0.997647058823529         0.984313725490196         0.792941176470588
            0.987450980392157          0.80078431372549          0.43843137254902
            0.985882352941177         0.567058823529412         0.276862745098039
            0.947450980392157         0.257254901960784         0.184313725490196
            0.770196078431373       0.00549019607843137         0.167058823529412
            0.56078431372549       0.00235294117647059         0.171764705882353];
    case lower('nph_modspectral')
        ccmap = flipud([...
            153 55 69
            193 79 88
            222 127 120
            231 172 141
            240 212 169
            255 255 255
            215 234 235
            157 211 223
            91 191 218
            25 161 202
            14 107 162] ./ 255);
    case lower('nph_RdBuPastel')
        ccmap = flipud([...
            0.764705882352941         0.150708458565908                         0
            0.811764705882353         0.294117647058823         0.164705882352941
            0.854901960784314         0.466666666666667         0.366666666666667
            0.905882352941177         0.641176470588235         0.576470588235294
            0.949019607843137         0.811372549019608         0.776078431372549
            0.949019607843137         0.949019607843137         0.949019607843137
            0.803921568627451         0.892156862745098         0.921568627450981
            0.629411764705882         0.788235294117647         0.835294117647059
            0.443137254901961         0.678431372549019         0.749019607843137
            0.264705882352942         0.570588235294118         0.663529411764706
            0.0862745098039216         0.462745098039216         0.580392156862745]);
    case lower('nph_RainbowWhite')
        ccmap = [...
            255 255 255
            221 244 247
            196 229 246
            160 207 237
            128 180 216
            101 158 202
            102 167 153
            100 181 107
            146 201 96
            204 218 106
            244 222 110
            243 181 92
            238 135 69
            229 103 58
            218 74 56
            199 49 51
            183 47 51
            148 43 47] ./ 255;
        
    case lower('nph_CyclicIceFire')
        ccmap = [...
            0.000000 0.000000 0.000006
            0.000000 0.120401 0.302675
            0.000000 0.216583 0.524574
            0.055247 0.345025 0.659500
            0.128047 0.492588 0.720288
            0.188955 0.641309 0.792092
            0.327673 0.784935 0.873434
            0.608240 0.892164 0.935547
            0.881371 0.912178 0.818099
            0.951407 0.835621 0.449279
            0.904481 0.690489 0.000000
            0.854070 0.510864 0.000000
            0.777093 0.330180 0.000882
            0.672862 0.139087 0.002694
            0.508815 0.000000 0.000000
            0.299417 0.000366 0.000548
            0.015752 0.003320 0.000000];
        
    case lower('nph_CyclicEdge')
        ccmap = [...
            0.191208 0.191208 0.191208
            0.239484 0.005450 0.614821
            0.220593 0.061746 0.863547
            0.175090 0.278988 0.977940
            0.143526 0.576069 0.998553
            0.166456 0.871883 0.965940
            0.376202 0.993555 0.981833
            0.681996 0.991297 0.999239
            0.954172 0.952734 0.943740
            0.999735 0.993010 0.662896
            0.979399 0.991466 0.357973
            0.968771 0.854967 0.162659
            0.999245 0.556697 0.144323
            0.973959 0.262230 0.177946
            0.852358 0.052671 0.222974
            0.593889 0.009127 0.238855
            0.191208 0.191208 0.191208];
        
    case lower('nph_CyclicMRYBM')
        ccmap = [...
            0.97561                   0.52012                   0.97096
            0.948615                  0.323145                   0.63008
            0.78966                   0.12217                   0.25066
            0.728655                   0.22735                  0.018455
            0.81626                   0.47063                  0.018394
            0.817125                  0.666065                    0.1457
            0.48632                   0.57986                   0.49821
            0.14737                  0.383795                  0.802045
            0.37916                   0.27724                   0.97657
            0.66064                   0.44873                   0.98734
            0.97003                   0.52229                   0.97779];
        
    case lower('nph_CyclicMRGBM')
        ccmap = [...
            0.93769                   0.33352                   0.94809
            0.987275                   0.62346                  0.706065
            0.98786                   0.85677                   0.40433
            0.820385                  0.913215                 0.0967965
            0.51672                   0.80395                  0.056522
            0.197435                  0.680065                   0.15095
            0.26823                   0.49837                     0.516
            0.153295                    0.2805                   0.80998
            0.34126                   0.12031                   0.95803
            0.637475                  0.243615                   0.98524
            0.93095                   0.32489                   0.95323];
        
    case lower('nph_OSQual')
        ccmap = [...
            1          0.12156862745098         0.356862745098039
            0         0.803921568627451         0.423529411764706
            0         0.603921568627451         0.870588235294118
            0.686274509803922         0.345098039215686         0.729411764705882
            1         0.776470588235294         0.117647058823529
            0.949019607843137         0.52156862745098          0.133333333333333
            0.627450980392157         0.694117647058824         0.729411764705882
            0.650980392156863         0.462745098039216         0.113725490196078
            0.913725490196078                         0         0.176470588235294
            1         0.666666666666667                         0
            0         0.690196078431373                         0];
        
        
    case lower('nph_OSDiv1')
        ccmap = [...
            0         0.576470588235294         0.572549019607843
            0.223529411764706         0.694117647058824          0.52156862745098
            0.611764705882353         0.796078431372549         0.525490196078431
            0.913725490196078         0.886274509803922         0.611764705882353
            0.933333333333333         0.705882352941177         0.474509803921569
            0.909803921568627         0.517647058823529         0.443137254901961
            0.811764705882353         0.349019607843137         0.494117647058824];
        
        
    case lower('nph_OSDiv2')
        ccmap = [...
            0.0156862745098039          0.32156862745098         0.458823529411765
            0.0313725490196078         0.564705882352941                       0.6
            0.486274509803922         0.796078431372549         0.635294117647059
            0.988235294117647         0.870588235294118         0.611764705882353
            0.941176470588235         0.454901960784314         0.431372549019608
            0.862745098039216         0.223529411764706         0.466666666666667
            0.486274509803922         0.113725490196078         0.435294117647059];
        
        
    case lower('nph_OSBlues')
        ccmap = [...
            0.894117647058824         0.945098039215686         0.968627450980392
            0.772549019607843         0.882352941176471         0.937254901960784
            0.619607843137255         0.788235294117647         0.886274509803922
            0.423529411764706         0.690196078431373          0.83921568627451
            0.235294117647059         0.576470588235294          0.76078431372549
            0.133333333333333         0.431372549019608         0.611764705882353
            0.0509803921568627         0.290196078431373          0.43921568627451];
        
    case lower('nph_OSGreens')
        ccmap = [...
            0.882352941176471         0.949019607843137         0.890196078431372
            0.803921568627451         0.898039215686275         0.823529411764706
            0.611764705882353         0.807843137254902         0.654901960784314
            0.423529411764706         0.729411764705882         0.490196078431373
            0.250980392156863          0.67843137254902         0.352941176470588
            0.133333333333333         0.545098039215686         0.231372549019608
            0.0235294117647059         0.349019607843137         0.164705882352941];
        
    case lower('nph_OSPinks')
        ccmap = [...
            0.976470588235294         0.847058823529412         0.901960784313726
            0.949019607843137         0.674509803921569         0.792156862745098
            0.929411764705882          0.52156862745098         0.690196078431373
            0.913725490196078         0.337254901960784         0.580392156862745
            0.890196078431372          0.16078431372549         0.466666666666667
            0.768627450980392        0.0588235294117647         0.356862745098039
            0.56078431372549                         0         0.231372549019608];
        
    case lower('nph_OSGnBu')
        ccmap = [...
            0.717647058823529         0.901960784313726         0.647058823529412
            0.486274509803922         0.796078431372549         0.635294117647059
            0.274509803921569         0.682352941176471         0.627450980392157
            0.0313725490196078         0.564705882352941                       0.6
            0         0.443137254901961         0.545098039215686
            0.0156862745098039          0.32156862745098         0.458823529411765
            0         0.192156862745098          0.27843137254902];
        
    case lower('nph_OSOrRdPu')
        ccmap = [...
            0.988235294117647         0.882352941176471         0.643137254901961
            0.980392156862745         0.749019607843137         0.482352941176471
            0.941176470588235          0.56078431372549         0.431372549019608
            0.87843137254902          0.36078431372549          0.36078431372549
            0.819607843137255          0.16078431372549         0.349019607843137
            0.670588235294118        0.0941176470588235                       0.4
            0.431372549019608                         0         0.372549019607843];
        
    case lower('nph_OSYlOrRd')
        ccmap = [...
            1         0.952941176470588         0.698039215686274
            0.996078431372549         0.850980392156863         0.462745098039216
            0.996078431372549         0.698039215686274         0.298039215686275
            0.992156862745098         0.552941176470588         0.235294117647059
            0.988235294117647         0.305882352941176         0.164705882352941
            0.890196078431372         0.101960784313725         0.109803921568627
            0.694117647058824                         0         0.149019607843137];
   

    case lower('nph_OSRdBuCombo')
        % this is a combination colormap of two fo the OS ones. Trying this
        % out so that we can use the pivot function.
        ccmap1 = [...
            0.894117647058824         0.945098039215686         0.968627450980392
            0.772549019607843         0.882352941176471         0.937254901960784
            0.619607843137255         0.788235294117647         0.886274509803922
            0.423529411764706         0.690196078431373          0.83921568627451
            0.235294117647059         0.576470588235294          0.76078431372549
            0.133333333333333         0.431372549019608         0.611764705882353
            0.0509803921568627         0.290196078431373          0.43921568627451];
        ccmap2 = [...
            0.988235294117647         0.882352941176471         0.643137254901961
            0.980392156862745         0.749019607843137         0.482352941176471
            0.941176470588235          0.56078431372549         0.431372549019608
            0.87843137254902          0.36078431372549          0.36078431372549
            0.819607843137255          0.16078431372549         0.349019607843137
            0.670588235294118        0.0941176470588235                       0.4
            0.431372549019608                         0         0.372549019607843];
        ccmap = [flipud(ccmap1) ; ccmap2];
        
    case lower('nph_ColorWheel')
        ccmap = [
            0 82 161
            0 124 198
            0 156 166
            0 150 60
            135 192 16
            255 227 5
            255 186 18
            255 127 25
            255 77 31
            255 15 33
            231 21 131
            128 35 132] ./ 255;
        
        case lower('nph_CyclicRainbow')
        ccmap = [
            126	44	112
            101	58	124	
            79	71	125	
            58	84	125	
            60	104	139	
            74	128	159	
            87	151	179	
            68	163	175	
            47	175	170	
            41	185	158	
            84	191	124	
            127	196	89	
            164	197	67	
            194	193	56	
            224	189	45	
            234	176	41	
            239	161	39	
            243	144	37	
            237	105	38	
            231	65	38	
            222	34	42	
            206	24	53	
            191	14	64	
            168	19	81] ./ 255;
        
        
        
end

% interpolate to right length:
if len == 0
    interpflag = 0;
    % leave it as its default length
    ccmapi = ccmap;
else
    interpflag = 1;
end

%%%% Decide if it's cyclic of not:
cyclic_colormaps = {'nph_ColorWheel','nph_CyclicIceFire','nph_CyclicEdge','nph_CyclicMRYBM','nph_CyclicMRGBM','nph_CyclicRainbow'};
iscyclic = any(strcmpi(ccmap_name,cyclic_colormaps));

if interpflag
    
    if iscyclic
        %%%% if we're using a cyclic colormap, we need to interpolate the start
        %%%% and ends together so that they loop nicely. Do this by catting and
        %%%% taking the middle bit:
        ccmap = repmat(ccmap,3,1);
%         %%%% add a little smoother to help with the end transitions?
%         ccmap = movmean(ccmap,3,1);
        % interp to desired size
        ccmapi = interp1(1:size(ccmap,1),ccmap,linspace(1,size(ccmap,1),len*3));
        % and trim to middle section:
        ccmapi = ccmapi((len+1):(len+len),:);
    else
        % interp to desired size
        ccmapi = interp1(1:size(ccmap,1),ccmap,linspace(1,size(ccmap,1),len));
    end
    
    
end

end% end function


















